import hashlib
from typing import Tuple, Union
import collections
from rdkit.Chem import AllChem

StoichTuple = collections.namedtuple("StoichTuple", "c_id, stoich")

def get_compound_hash(
    smi: str, inchi_blocks: int = 1
) -> Tuple[str, Union[str, None]]:
    """Create a hash string for a given compound.

    This function generates an unique identifier for a compound, ensuring a
    normalized SMILES. The compound hash is generated by sanitizing and neutralizing the
    SMILES and then generating a hash from the sha1 method in the hashlib.

    Parameters
    ----------
    smi : str
        The SMILES of the compound.

    Returns
    -------
    Tuple[str, Union[str, None]]
        Compound hash, InChI-Key.
    """

    # The ID is generated from a hash of either the InChI key (partial) or SMILES
    # The InChI key is used if the SMILES does not contain '*'
    inchi_key = None

    if "*" not in smi:
        compound = AllChem.MolFromSmiles(smi)
        try:
            inchi_key = AllChem.MolToInchiKey(compound)
            # Take the first part of the InChIKey as it contains structural
            # information only
            compound = inchi_key.rsplit("-", 3 - inchi_blocks)[0]
        except:
            compound = smi
    else:
        compound = smi

    # Create standard length hash string using hashlib module
    chash = hashlib.sha1(compound.encode("utf-8")).hexdigest()

    # Mark cofactors with an X at the beginning, targets with a T, all else with a C
    return "C" + chash, inchi_key
    
def get_reaction_hash(reactants, products):
    """Hashes reactant and product lists.

    Generates a unique ID for a given reaction for use in MongoDB.

    Parameters
    ----------
    reactants : List[StoichTuple]
        List of reactants.
    products : List[StoichTuple]
        List of products.

    Returns
    -------
        Reaction hash.
    """
    # Get text reaction to be hashed
    # this is a combination of two functions
    def to_str(half_rxn):
        return [f"({x[1]}) {x[0]}" for x in sorted(half_rxn)]
    reactants.sort()
    products.sort()
    text_ids_rxn = (
        " + ".join(to_str(reactants)) + " => " + " + ".join(to_str(products))
    )
    # Hash text reaction
    rhash = "R" + hashlib.sha256(text_ids_rxn.encode()).hexdigest()

    return rhash

if __name__ == '__main__':
    pass
    